require("dotenv").config({ path: "./assets/modules/.env" });
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const bot = new TelegramBot(process.env.devStatus ? process.env.TEST_TOKEN : process.env.DEAFAULT_TOKEN, {
  polling: true,
});
const {
  adminStartKeyboard,
  userStartKeyboard,
  arenaKeyboard,
  adminOptionsKeyboard,
  shopKeyboard,
} = require("./assets/keyboard/keyboard");
const {
  sendProfileData,
  changeName,
  myCards,
  refLink,
  addCardToMatchInventory,
} = require("./assets/scripts/userFunctions");
const {
  setAdmin,
  giveCardToUser,
  findUser,
  createPromo,
  showAllUsers,
  askCardDetails,
  addShopText,
  removeAdmin,
} = require("./assets/scripts/adminFunctions");
const {
  addToWaitingRoom,
  matchInventory,
  processCallback,
  checkAndCreateMatch,
  addToMatchInventory,
} = require("./assets/scripts/matchFunctions");
const {
  getPack,
  getUniquePack,
} = require("./assets/scripts/shopFunctions");
const { giveRandomCardToUser } = require("./assets/scripts/getCard");
const { top } = require("./assets/scripts/top");

const shopText = require("./assets/db/shop/shop.json");
const commands = JSON.parse(fs.readFileSync("./assets/db/commands/commands.json"));
const db = require('./assets/db/db.json');

bot.setMyCommands(commands);


bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const channelUsername = '@MCLPodPivomTournament'

  if (msg.chat.type !== 'private') {
    try {
      const chatMember = await bot.getChatMember(channelUsername, userId);
      if (!chatMember || (chatMember.status !== "member" && chatMember.status !== "administrator" && chatMember.status !== "creator")) {
        await bot.sendMessage(chatId, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (/start), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º.");
        return;
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
      await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.");
      return;
    }
  } else {
    if (msg.text.startsWith("/")) {
      if (msg.text === "/start") {
        await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @" + channelUsername, {
          reply_markup: {
            remove_keyboard: true
          }
        });
      } else if (msg.text === "/getcard") {
        giveRandomCardToUser(bot, msg);
      } else {
        await bot.sendMessage(chatId, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /getcard");
      }
    } else {
      if (msg.chat.type === 'private') {
        await bot.sendMessage(chatId, "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ –æ–±—â–∏–π —á–∞—Ç.");
      } else {
        await bot.sendMessage(chatId, "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É.");
      }
    }
  }

  let user = db.find(user => user.username === msg.from.username)

  if (msg.chat.type === 'group' || msg.chat.type === 'supergroup') {
    if (msg.text === "/get—Åard" || msg.text === 'üÄÑÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É') {
      giveRandomCardToUser(bot, msg);
    }
  } else {
    switch (msg.text) {
      case "/start":
        if (!user) {
          db.push({
            id: msg.from.id,
            username: msg.from.username,
            first_name: msg.from.first_name,
            last_name: msg.from.last_name,
            balance: 0,
            rating: null,
            inventory: [],
            matchInventory: [],
            isAdmin: false,
            isWaiting: false,
            isMatch: false,
            wonMatches: 0,
            looseMatches: 0,
            lastActionTime: 0
          });
          fs.writeFileSync('./assets/db/db.json', JSON.stringify(db, null, "\t"));
          await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${msg.from.username}`, userStartKeyboard);
        } else {
          const isAdminMessage = user.isAdmin ? "–í—ã –∞–¥–º–∏–Ω!" : "";
          await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç ${msg.from.username}. ${isAdminMessage}`, user?.isAdmin ? adminStartKeyboard : userStartKeyboard);
        }
        break;
      case "/profile":
      case "üë§ –õ–∏—á–Ω—ã–π –ü—Ä–æ—Ñ–∏–ª—å":
        sendProfileData(bot, msg);
        break;
      case "/arenas":
      case "‚öîÔ∏è –ê—Ä–µ–Ω—ã":
        await bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –ê—Ä–µ–Ω", arenaKeyboard);
        break;
      case "/shop":
      case "üõí –ú–∞–≥–∞–∑–∏–Ω –ø–∞–∫–æ–≤":
        await bot.sendMessage(chatId, 'üí∞ –¶–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ "–ø–∞–∫–∞" —Ä–∞–≤–Ω—è–µ—Ç—Å—è 2000 –≤–∞–ª—é—Ç—ã\n\nüí∞ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–∞—Ä—Ç—ã –¥–∞—é—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–≤–Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –æ—Ç —Å–∏–ª—ã –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã', shopKeyboard);
        break;
      case "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
        if (user?.isAdmin) {
          await bot.sendMessage(chatId, "–≤–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å", adminOptionsKeyboard);
        }
        break;
      case "üÄÑÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –º–∞—Ç—á–µ–π":
      case "/addcardtomatch":
        matchInventory(bot, msg);
        break;
      case "/top":
        top(bot, msg);
        break;
      case "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —É–∑–Ω–∞–ª–∏ –ø—Ä–æ –Ω–∞—Å");
        bot.once('message', async (nextMsg) => {
          await refLink(bot, nextMsg);
        });
        break;
      case "üÄÑÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É":
      case "/getcard":
        giveRandomCardToUser(bot, msg)
      default:
        break;
    }
  }
});
bot.on("callback_query", async (msg) => {
  if (msg.data.startsWith("createPromo_")) {
    await addToMatchInventory(bot, msg);
  } else if (msg.data === "createPromo") {
    createPromo(bot, msg);
  } else if (msg.data === "showAllUsers") {
    showAllUsers(bot, msg);
  } else if (msg.data === "findUser") {
    await bot.sendMessage(msg.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    await findUser(bot, msg);
  } else if (msg.data === "addCardToUser") {
    giveCardToUser(bot, msg);
  } else if (msg.data === "setAdmin") {
    await bot.sendMessage(msg.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    bot.once("message", (msg) => setAdmin(bot, msg));
  } else if (msg.data === "usualmatch") {
    await addToWaitingRoom(bot, msg);
  } else if (msg.data === "getonepack") {
    console.log("callback —Å—Ä–∞–±–æ—Ç–∞–ª")
    await getPack(bot, msg, 1);
  } else if (msg.data === "getfivepacks") {
    getPack(bot, msg, 5);
  } else if (msg.data === "gettenpacks") {
    getPack(bot, msg, 10);
  } else if (msg.data === "rating") {
    processCallback(bot, msg);
  } else if (msg.data === "usual") {
    checkAndCreateMatch(bot, msg);
  } else if (msg.data === "changename") {
    await bot.sendMessage(msg.message.chat.id, "–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à username");
    bot.once("message", (msg) => changeName(bot, msg));
  } else if (msg.data === "mycards") {
    myCards(bot, msg);
  } else if (msg.data === "closewindow") {
    await bot.deleteMessage(msg.message.chat.id, msg.message.message_id);
    await bot.sendMessage(msg.message.chat.id, "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω –≤–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å", adminStartKeyboard);
  } else if (msg.data === "addcard") {
    askCardDetails(bot, msg);
  } else if (msg.data === "myteam") {
    myCards(bot, msg);
  } else if (msg.data === "addshoptext") {
    addShopText(bot, msg);
  } else if (msg.data === "getuniquepack") {
    await getUniquePack(bot, msg);
  } else if (msg.data === "ratingmatch") {
    processCallback(bot, msg);
  } else if (msg.data === "removeadmin") {
    removeAdmin(bot, msg);
  }else if(msg.data === 'addToMatchInventory'){
    addCardToMatchInventory(bot, msg)
  }else {
    await bot.sendMessage(msg.message.chat.id, "–¢–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  }
});

bot.onText(/\/getcard/, async (msg) => {
  const chatId = msg.chat.id;
  if (msg.chat.type === 'private') {
    // –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    giveRandomCardToUser(bot, msg);
  } else {
    // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (–≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–æ–º–∞–Ω–¥—ã
    giveRandomCardToUser(bot, msg);

  }
});


bot.on("new_chat_members", async (msg) => {
  const chatId = msg.chat.id;
  const channelUsername = "@MCLPodPivom";
  const botId = bot.botId;

  if (msg.new_chat_members.some(member => member.id === botId)) {
    await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ —á–∞—Ç. –Ø –º–æ–≥—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /getCard.");
  }
});
bot.on("polling_error", console.log);
