const fs = require("fs");
const { profileKeyboard, addMatchInventory } = require("../keyboard/keyboard");
const promos = require("../db/promos/promos.json");
const db = require("../db/db.json");
const cards = require("../db/images/images.json");

async function sendProfileData(bot, msg) {
  const filteredUsers = db.filter((user) => user?.id === msg.from.id);

  if (filteredUsers.length > 0) {
    const user = filteredUsers[0];

    await bot.sendMessage(
      msg.chat.id,
      `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}\nID: ${user.id}\n–ò–º—è: ${user.first_name}\n–§–∞–º–∏–ª–∏—è: ${user.last_name}\n–ë–∞–ª–∞–Ω—Å: ${user.balance}\n–†–µ–π—Ç–∏–Ω–≥: ${user.rating}\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${user.inventory.length} –∏–∑ ${cards.length}\n`,
      profileKeyboard
    );
  } else {
    await bot.sendMessage(msg.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}

async function myCards(bot, msg) {
  const userInventory = db.find((user) => user?.username === msg.from.username);

  if (userInventory.length === 0) {
    return bot.sendMessage(msg.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã —Å–Ω–∞—á–∞–ª–∞.");
  } else {
    for (const card of userInventory?.inventory) {
      const keyboard = {
        inline_keyboard: [
            [{ text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –º–∞—Ç—á–∞', callback_data: 'addToMatchInventory' }],
        ],
        resize_keyboard: true
      };
      await bot.sendPhoto(msg.message.chat.id, card.cardPhoto, {
        caption: `ü¶† ${card.cardName}\nüîÆ –†–µ–¥–∫–æ—Å—Ç—å: ${card.cardRarity}\n–ê—Ç–∞–∫–∞: ${card.cardPower || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n–ó–∞—â–∏—Ç–∞: ${card.cardDeffence || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}`,
        reply_markup: keyboard
      });
  }
  }
}

async function checkPromo(bot, msg) {
  let promo = promos.find((promo) => promo.name === msg.text);
  
  if (!promo) {
    await bot.sendMessage(
      msg.message.chat.id,
      "—Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    );
  } else {
    await bot.sendMessage(
      msg.message.chat.id,
      "–ø–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ"
    );
    promo.name = {};
    fs.writeFileSync(
      "./assets/db/promos/promos.json",
      JSON.stringify(promo.text, null, "\t")
    );
  }
}

async function changeName(bot, msg) {
  let user = db.find((user) => user.id === msg.from.id);

  user.first_name = msg.text;
  fs.writeFileSync(db, JSON.stringify(db, null, "\t"));
  await bot.sendMessage(
    msg.chat.id,
    `–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∏–º—è –Ω–∞ ${db[name].first_name}`
  );
}// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É db.json

async function refLink(bot, msg) {
  let usedRefLinks = [];

  if (msg.from && msg.from.username) {
    if (usedRefLinks.includes(msg.from.username)) {
      return bot.sendMessage(msg.chat.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É.");
    }

    let cleanedUsername = msg.text;

    if (!cleanedUsername) {
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
      return;
    }

    console.log("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", cleanedUsername);

    let userExists = db.some(user => user.username === cleanedUsername);

    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", userExists);

    if (userExists) {
      let user = db.find(user => user.username === cleanedUsername);
      user.balance += 2000;
      usedRefLinks.push(msg.from.username); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
      fs.writeFileSync('./assets/db/db.json', JSON.stringify(db, null, '\t'));
      await bot.sendMessage(msg.chat.id, "–ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –µ–º—É —Å–ø–∞—Å–∏–±–æ");
    } else {
      await bot.sendMessage(msg.chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    cleanedUsername = undefined;
  }
}



async function addCardToMatchInventory(bot, msg){
  let userInventory = cards.find(card => card.cardName === msg.text)
  let user = db.find(user => user.username === msg.message.from.username)
  if(!userInventory && msg.text){
    await bot.sendMessage(msg.message.chat.id, "–¢–∞–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
  }else{
    await bot.sendMessage(msg.message.chat.id, "–∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
    user?.matchInventory?.push(userInventory)
    fs.writeFileSync('./assets/db/db.json', JSON.stringify(db, null, '\t'))
  }
  
}

module.exports = {
  sendProfileData: sendProfileData,
  changeName: changeName,
  myCards: myCards,
  checkPromo: checkPromo,
  addCardToMatchInventory: addCardToMatchInventory,
  refLink: refLink
};
