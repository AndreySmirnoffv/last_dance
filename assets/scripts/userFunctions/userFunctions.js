const fs = require("fs");
const { profileKeyboard } = require("../../keyboard/keyboard");
const promos = require("../../db/promos/promos.json");
const db = require("../../db/db.json");
const cardsData = require("../../db/images/images.json");

async function sendProfileData(bot, msg) {
  const filteredUsers = db.filter((user) => user.username === msg.from.username);
  
  if (filteredUsers.length > 0) {
    const user = filteredUsers[0];
    const allCards = cardsData; // cardsData —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º JSON

    const userInventory = user.inventory || [];
    const userCardsCount = userInventory.length;
    const allCardsCount = allCards.length;

    await bot.sendMessage(msg.chat.id, `${userCardsCount} –∏–∑ ${allCardsCount}`);
    await bot.sendMessage(msg.chat.id, `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}\nID: ${user.id}\n–ò–º—è: ${user.first_name}\n–§–∞–º–∏–ª–∏—è: ${user.last_name}\n–ë–∞–ª–∞–Ω—Å: ${user.balance}\n–†–µ–π—Ç–∏–Ω–≥: ${user.rating}\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${userCardsCount} –∏–∑ ${allCardsCount}\n`, profileKeyboard);
  } else {
    await bot.sendMessage(msg.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }
}


async function myCards(bot, msg) {
  try {
    const userIndex = db.findIndex(
      (user) => user.username === msg.from.username
    );

    if (userIndex === -1 || !db[userIndex].hasOwnProperty("inventory")) {
      console.error("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.");
      return bot.sendMessage(
        msg.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã —Å–Ω–∞—á–∞–ª–∞."
      );
    }

    const userInventory = db[userIndex].inventory;

    if (userInventory.length === 0) {
      return bot.sendMessage(
        msg.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—ã —Å–Ω–∞—á–∞–ª–∞."
      );
    }

    for (const card of userInventory) {
      await bot.sendPhoto(msg.chat.id, card.fileId, {
        caption: `ü¶† ${card.name}\nüîÆ –†–µ–¥–∫–æ—Å—Ç—å: ${card.rarity}\n–ê—Ç–∞–∫–∞: ${
          card.power || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        }\n–ó–∞—â–∏—Ç–∞: ${card.deffence || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}`,
      });
    }
  } catch (error) {
    console.error(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      error.message
    );
    await bot.sendMessage(
      msg.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
}

async function checkPromo(bot, msg) {
  let promo = promos.find((promo) => promo.name === msg.text);
  if (!promo) {
    await bot.sendMessage(
      msg.message.chat.id,
      "—Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    );
  } else {
    await bot.sendMessage(
      msg.message.chat.id,
      "–ø–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ"
    );
    promo.name = {};
    fs.writeFileSync(
      "../../db/promos/promos.json",
      JSON.stringify(promo.text, null, "\t")
    );
  }
}

async function changeName(bot, msg) {
  let name = users.find((user) => user.username === msg.data.from.username);
  if (!name) {
    await bot.sendMessage(msg.message.chat.id, "–≤–∞—Å –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
  } else {
    await bot.sendMessage(
      msg.message.chat.id,
      "–Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à username"
    );
    name.username = msg.text;
    fs.writeFileSync(
      "../../db/db.json",
      JSON.stringify(name.username, null, "\t")
    );
  }
}

module.exports = {
  sendProfileData: sendProfileData,
  changeName: changeName,
  myCards: myCards,
  checkPromo: checkPromo,
};
